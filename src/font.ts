// Simple 5x7 bitmap font for drawing text
const FONT_5X7: { [key: string]: number[] } = {
  'A': [0x3E, 0x48, 0x48, 0x48, 0x3E],
  'B': [0x7E, 0x4A, 0x4A, 0x4A, 0x34],
  'C': [0x3C, 0x42, 0x42, 0x42, 0x24],
  'D': [0x7E, 0x42, 0x42, 0x42, 0x3C],
  'E': [0x7E, 0x4A, 0x4A, 0x4A, 0x42],
  'F': [0x7E, 0x48, 0x48, 0x48, 0x40],
  'G': [0x3C, 0x42, 0x42, 0x4A, 0x2C],
  'H': [0x7E, 0x08, 0x08, 0x08, 0x7E],
  'I': [0x42, 0x42, 0x7E, 0x42, 0x42],
  'J': [0x04, 0x02, 0x02, 0x02, 0x7C],
  'K': [0x7E, 0x08, 0x14, 0x22, 0x40],
  'L': [0x7E, 0x02, 0x02, 0x02, 0x02],
  'M': [0x7E, 0x20, 0x10, 0x20, 0x7E],
  'N': [0x7E, 0x20, 0x10, 0x08, 0x7E],
  'O': [0x3C, 0x42, 0x42, 0x42, 0x3C],
  'P': [0x7E, 0x48, 0x48, 0x48, 0x30],
  'Q': [0x3C, 0x42, 0x42, 0x46, 0x3D],
  'R': [0x7E, 0x48, 0x48, 0x4C, 0x32],
  'S': [0x32, 0x4A, 0x4A, 0x4A, 0x26],
  'T': [0x40, 0x40, 0x7E, 0x40, 0x40],
  'U': [0x7C, 0x02, 0x02, 0x02, 0x7C],
  'V': [0x70, 0x0C, 0x02, 0x0C, 0x70],
  'W': [0x7E, 0x04, 0x08, 0x04, 0x7E],
  'X': [0x66, 0x18, 0x18, 0x18, 0x66],
  'Y': [0x60, 0x10, 0x0E, 0x10, 0x60],
  'Z': [0x46, 0x4A, 0x52, 0x62, 0x42],
  ' ': [0x00, 0x00, 0x00, 0x00, 0x00],
  '_': [0x02, 0x02, 0x02, 0x02, 0x02],
  '!': [0x00, 0x00, 0x7A, 0x00, 0x00],
  '?': [0x30, 0x48, 0x4A, 0x48, 0x30],
  '.': [0x00, 0x00, 0x02, 0x00, 0x00],
  ',': [0x00, 0x01, 0x02, 0x00, 0x00],
  ':': [0x00, 0x00, 0x14, 0x00, 0x00],
  '-': [0x08, 0x08, 0x08, 0x08, 0x08],
  '\'': [0x00, 0x00, 0x60, 0x00, 0x00],
  '"': [0x60, 0x00, 0x60, 0x00, 0x00],
  '0': [0x3C, 0x46, 0x4A, 0x52, 0x3C],
  '1': [0x00, 0x22, 0x7E, 0x02, 0x00],
  '2': [0x22, 0x46, 0x4A, 0x52, 0x22],
  '3': [0x44, 0x42, 0x52, 0x52, 0x6C],
  '4': [0x18, 0x28, 0x48, 0x7E, 0x08],
  '5': [0x74, 0x52, 0x52, 0x52, 0x4C],
  '6': [0x3C, 0x52, 0x52, 0x52, 0x0C],
  '7': [0x40, 0x46, 0x48, 0x50, 0x60],
  '8': [0x2C, 0x52, 0x52, 0x52, 0x2C],
  '9': [0x30, 0x4A, 0x4A, 0x4A, 0x3C],
  '/': [0x06, 0x08, 0x10, 0x20, 0x60],
};

export function drawChar(canvas: boolean[][], char: string, x: number, y: number, scale: number = 1): void {
  const fontData = FONT_5X7[char.toUpperCase()];
  if (!fontData) return;

  for (let col = 0; col < 5; col++) {
    const column = fontData[col];
    for (let row = 0; row < 7; row++) {
      if (column & (1 << (6 - row))) {
        // Draw scaled pixel
        for (let dy = 0; dy < scale; dy++) {
          for (let dx = 0; dx < scale; dx++) {
            const px = x + col * scale + dx;
            const py = y + row * scale + dy;
            if (py >= 0 && py < canvas.length && px >= 0 && px < canvas[0].length) {
              canvas[py][px] = true;
            }
          }
        }
      }
    }
  }
}

export function drawText(canvas: boolean[][], text: string, x: number, y: number, scale: number = 1): void {
  let currentX = x;
  const charWidth = 5 * scale;
  const spacing = scale;

  for (const char of text) {
    drawChar(canvas, char, currentX, y, scale);
    currentX += charWidth + spacing;
  }
}

export function getTextWidth(text: string, scale: number = 1): number {
  const charWidth = 5 * scale;
  const spacing = scale;
  return text.length * charWidth + (text.length - 1) * spacing;
}